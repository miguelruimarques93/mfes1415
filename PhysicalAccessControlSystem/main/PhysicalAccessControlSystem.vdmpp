class PhysicalAccessControlSystem

-------------------------------------
--   PhysicalAccessControlSystem   --
-------------------------------------
--           Description           --
-- - - - - - - - - - - - - - - - - --
--   Class that representes the    --
-- entire physical access control  --
-- system.                         --
-------------------------------------

types

	/* User Type */
	public User :: name: Utils`String
	/* Invariant - User name length must be bigger then 0 */
	inv mk_User(n) == len n > 0;
	
	/* Facility Type */
	public Facility :: name: Utils`String
	/* Invariant - Facility name length must be bigger then 0 */
	inv mk_Facility(n) == len n > 0;
	
	/* GroupUser Type as a set of Users */
	GroupUser = set of User;
	/* GroupFacility Type as a set of Facilities */
	GroupFacility = set of Facility;
	
instance variables

	/* Log File Name */
	logFilename: Utils`String;
	/* IO Overture Standard Library */
	io: IO := new IO();

	/* Last Access Card ID */
	lastAccessCardId: nat := 0;
	/* Last Access Point ID */
	lastAccessPointId: nat := 0;
	
	/* users as a set of User */
	users: set of User := {};
	/* groupUsers as a map of String to GroupUser */
	groupUsers: map Utils`String to GroupUser := {|->};
	
	/* facilities as a set of Facility */
	facilities: set of Facility := {};
	/* groupfacilities as a map of String to GroupFacility */
	groupFacilities: map Utils`String to GroupFacility := {|->};
	
	/* accessCards as a set of AccessCard */
	accessCards: set of AccessCard := {};
	/* accessPolicies as a map of AccessPoint to a seq of AccessRule */
	accessPolicies: map AccessPoint to seq of AccessRule := {|->};
	
	/* accessCardUser as a map of AccessCard to User */
	accessCardUser: map AccessCard to User := {|->};

	/* Invariant - Domain of accessCardUser is a subset of accessCards */
	inv dom accessCardUser subset accessCards;
	/* Invariant - Range of accessCardUser is a subset of users */
	inv rng accessCardUser subset users;
	/* Invariant - accessCards ID must be unique */
	inv forall ac in set accessCards & forall ac1 in set accessCards \ {ac} & ac1.getID() <> ac.getID()
	
operations

	/*
	 * PhysicalAccessControlSystem constructor with filename.
	 *
	 * @param filename - a String with the desire log filename
	 *
	 * @return PhysicalAccessControlSystem with the logFilename set to the param values 
	 */
	public PhysicalAccessControlSystem: Utils`String ==> PhysicalAccessControlSystem
	PhysicalAccessControlSystem(filename) == (
		logFilename := filename;
		log("\n-- NEW LOG --");
		return self;
	);
	
	/*
	 * Writes the given String val to the log file.
	 *
	 * @param val - value to write to the log file
	 */
	private log : Utils`String ==> ()
	log(val) == if not io.fecho(logFilename, val ^ "\n" , <append>) then IO`println("Error writing message to log file: " ^ val);

	/*
	 * Creates an AccessCard and adds it to the accessCards set.
	 * 
	 * @return AccessCard
	 */
	public createNewAccessCard: () ==> AccessCard
	createNewAccessCard() == (
		lastAccessCardId := lastAccessCardId + 1;
		let ac: AccessCard = new AccessCard(lastAccessCardId) in (
			accessCards := accessCards union {ac};
			return ac;
		);
	);
	
	/*
	 * Creates a temporary AccessCard and adds it to the accessCards set.
	 * 
	 * @param expDate - desired expiration date for the created accesscard
	 *
	 * @return AccessCard with the expirationDate set to the param value
	 */
	public createNewTemporaryAccessCard: DateTime ==> AccessCard
	createNewTemporaryAccessCard(expDate) == (
		let newCard: AccessCard = createNewAccessCard() in (
			newCard.setExpirationDate(expDate);
			return newCard;
		);
	);
	
	/*
	 * Removes an AccessCard from accessCards set and from accessCardUser map domain.
	 * 
	 * @param ac - the accesscard to be removed
	 */
	public removeAccessCard: AccessCard ==> ()
	removeAccessCard(ac) == (
		accessCards := accessCards \ { ac };
		accessCardUser := { ac } <-: accessCardUser;
	)
	pre ac in set accessCards
	post not ac in set accessCards and
			 not ac in set dom accessCardUser;
	
	/*
	 * Creates a User and adds it to the users set and the groupUsers map.
	 *
	 * @param name - the new user desired name
	 *
	 * return User with the name set to the param value
	 */
	public createNewUser : Utils`String ==> User
	createNewUser(name) == (
		let user = mk_User(name) in (
			groupUsers := groupUsers munion { name |-> { user } };
			users := users union {user};
			return user;
		);
	)
	pre let u = mk_User(name) in u not in set users;
	
	/*
	 * Removes a User from users, from every user group is in, from is own user group and removes every rule associated with his own user group.
	 *
	 * @param user - User to be removed
	 */
	public removeUser: User ==> ()
	removeUser(user) == (
		users := users \ { user };
		for all groupName in set dom groupUsers do (
			groupUsers(groupName) := groupUsers(groupName) \ { user }; 
		);
		groupUsers := { user.name } <-: groupUsers;
		accessCardUser := accessCardUser :-> { user };
		for all ap in set dom accessPolicies do (
			accessPolicies(ap) := [accessPolicies(ap)(i) | i in set inds accessPolicies(ap) & accessPolicies(ap)(i).groupUser <> user.name]
		);
	)
	pre user in set users
	post not user in set users and
			 not user in set rng accessCardUser and
			 not user in set dunion rng groupUsers;
	
	/*
	 * Associates a given AccessCard with a given User.
	 *
	 * @param ac - AccessCard to be associated to
	 * @param user - User to associate with
	 */
	public associateAccessCardToUser: AccessCard * User ==> ()
	associateAccessCardToUser(ac, user) == (
		accessCardUser := accessCardUser munion { ac |-> user };
	) pre ac in set accessCards and
				user in set users and
				user not in set rng accessCardUser and 
				ac not in set dom accessCardUser;
	
	/*
	 * Removes the AccessCard associated with a given User.
	 *
	 * @param user - User from which the accessCard will be removed
	 */
	public removeUserAccessCard: User ==> ()
	removeUserAccessCard(user) == (
		accessCardUser := accessCardUser :-> { user };
	) pre user in set rng accessCardUser;
	
	public transferUserAccessCard: User * User ==> ()
	transferUserAccessCard(source, destination) == (
		let ac: AccessCard = (inverse accessCardUser)(source) in (
			removeUserAccessCard(source);
			associateAccessCardToUser(ac, destination);
		);	
	);
	
	/*
	 * Creates a new group of users and adds it to the groupUsers map.
	 *
	 * @param name - desired group user name
	 */
	public createNewGroupOfUsers : Utils`String ==> ()
	createNewGroupOfUsers(name) == (
		groupUsers := groupUsers munion { name |-> { } };
	)
	pre not name in set dom groupUsers
	post name in set dom groupUsers;
	
	/*
	 * Removes a group of users from the groupUsers map and every rule associated with it.
	 *
	 * @param name - name of the user group to be removed
	 */
	public removeGroupOfUsers : Utils`String ==> ()
	removeGroupOfUsers(name) == (
		groupUsers := { name } <-: groupUsers;
		for all ap in set dom accessPolicies do (
			accessPolicies(ap) := [accessPolicies(ap)(i) | i in set inds accessPolicies(ap) & accessPolicies(ap)(i).groupUser <> name]
		);
	)
	pre name in set dom groupUsers
	post not name in set dom groupUsers;
	
	/*
	 * Adds a user to a group of users.
	 *
	 * @param groupName - user group name to which the user will be added
	 * @param user - user that will be added
	 */
	public addUserToGroupOfUsers : Utils`String * User ==> ()
	addUserToGroupOfUsers(groupName, user) == (
		groupUsers(groupName) := groupUsers(groupName) union { user };
	)
	pre groupName in set dom groupUsers 
	and user in set users
	post user in set groupUsers(groupName);
	
	/*
	 * Removes a user from a group of users.
	 *
	 * @param groupName - user group name from which the user will be removed
	 * @param user - user that will be removed
	 */
	public removeUserFromGroupOfUsers : Utils`String * User ==> ()
	removeUserFromGroupOfUsers(groupName, user) == (
		groupUsers(groupName) := groupUsers(groupName) \ { user };
	)
	pre groupName in set dom groupUsers and
			user in set groupUsers(groupName)
	post groupName in set dom groupUsers => not user in set groupUsers(groupName);

	/*
	 * Creates a new facility with a given name.
	 *
	 * @param name - desired facility name
	 *
	 * @return Facility with the name set to the given param
	 */
	public createNewFacility: Utils`String ==> Facility
	createNewFacility(name) == (
		let fac = mk_Facility(name) in (
			groupFacilities := groupFacilities munion { name |-> { fac } };
			facilities := facilities union { fac };
			return fac
		);
	)
	pre let f = mk_Facility(name) in f not in set facilities;
	
	/*
	 * Removes a facility from the groupFacilities map and every rule associated with it.
	 *
	 * @param fac - facility that will be removed
	 */
	public removeFacility: Facility ==> ()
	removeFacility(fac) == (
		facilities := facilities \ { fac };
		for all groupName in set dom groupFacilities do (
			groupFacilities(groupName) := groupFacilities(groupName) \ { fac }; 
		);
		groupFacilities := { fac.name } <-: groupFacilities;
		accessPolicies := { ap | ap in set dom accessPolicies & ap.facility = fac } <-: accessPolicies;
		for all ap in set dom accessPolicies do (
			accessPolicies(ap) := [accessPolicies(ap)(i) | i in set inds accessPolicies(ap) & accessPolicies(ap)(i).groupFacility <> fac.name]
		);
	)
	pre fac in set facilities
	post not fac in set facilities and
			 not fac in set { ap.facility | ap in set dom accessPolicies } and
			 not fac in set dunion rng groupFacilities;
	
	/*
	 * Creates a new group of facilities with a given name.
	 *
	 * @param name - desired group of facilities name
	 */
	public createNewGroupOfFacilities : Utils`String ==> ()
	createNewGroupOfFacilities(name) == (
		groupFacilities := groupFacilities munion { name |-> { } };
	)
	pre not name in set dom groupFacilities;
	
	/*
	 * Removes a group of facilities and every rule associated with it.
	 *
	 * @param name - name of the group of facilities to be removed
	 */
	public removeGroupOfFacilities : Utils`String ==> ()
	removeGroupOfFacilities(name) == (
		groupFacilities := { name } <-: groupFacilities;
		for all ap in set dom accessPolicies do (
			accessPolicies(ap) := [accessPolicies(ap)(i) | i in set inds accessPolicies(ap) & accessPolicies(ap)(i).groupFacility <> name]
		);
	)
	pre name in set dom groupFacilities
	post not name in set dom groupFacilities;
	
	/*
	 * Adds a facility to a group of facilities.
	 *
	 * @param groupName - facilities group name to which the facility will be added
	 * @param fac - facility that will be added
	 */
	public addFacilityToGroupOfFacilities : Utils`String * Facility ==> ()
	addFacilityToGroupOfFacilities(groupName, fac) == (
		groupFacilities(groupName) := groupFacilities(groupName) union { fac };
	)
	pre groupName in set dom groupFacilities and 
			fac in set facilities;
	
	/*
	 * Removes a facility from a group of facilities.
	 *
	 * @param groupName - facilities group name from which the facility will be removed
	 * @param fac - facility that will be removed
	 */
	public removeFacilityFromGroup : Utils`String * Facility ==> ()
	removeFacilityFromGroup(groupName, fac) == (
		groupFacilities(groupName) := groupFacilities(groupName) \ { fac };
	)
	pre groupName in set dom groupFacilities and 
			fac in set facilities and
			fac in set groupFacilities(groupName)
	post groupName in set dom groupFacilities => not fac in set groupFacilities(groupName);
	
	/*
	 * Creates a new Accesspoint in a Facility.
	 *
	 * @param fac - facility to which the accesspoint will be added
	 *
	 * @return the created AccessPoint
	 */
	public createNewAccessPoint: Facility ==> AccessPoint
	createNewAccessPoint(fac) == (
		lastAccessPointId := lastAccessPointId + 1;
		let ap: AccessPoint = new AccessPoint(lastAccessPointId, fac) in (
			accessPolicies := accessPolicies munion { ap |-> [ ] };
			return ap;
		);
	)
	pre fac in set facilities;
	
	/*
	 * Removes an AccessPoint and every rule associated with it.
	 *
	 * @param ap - accesspoint that will be removed
	 */
	public removeAccessPoint: AccessPoint ==> ()
	removeAccessPoint(ap) == (
		accessPolicies := { ap } <-: accessPolicies;
	)
	pre ap in set dom accessPolicies
	post not ap in set dom accessPolicies;
	
	/*
	 * Adds a given AccessRule to a given AccessPoint
	 *
	 * @param ap - accesspoint to which the accessrule will be added
	 * @param ar - accessrule that will be added to the accesspoint
	 */
	public addAccessRuleToAccessPoint: AccessPoint * AccessRule ==> ()
	addAccessRuleToAccessPoint(ap, ar) == (
		accessPolicies(ap) := accessPolicies(ap) ^ [ ar ] 
	)
	pre ar.groupUser in set dom groupUsers and ar.groupFacility in set dom groupFacilities; 

	private requestAccessImpl : AccessCard * AccessPoint * DateTime ==> (bool * Utils`String * Utils`String)
	requestAccessImpl(ac, accessPoint, date) == (
		if not ac in set dom accessCardUser then return mk_(false, "Uknown user", "access card is not associated with a user");
		if not ac.isValid(date) then return mk_(false, accessCardUser(ac).name, "access card expired");
		
		let user: User = accessCardUser(ac),
			  rules: seq of AccessRule = accessPolicies(accessPoint),
			  validIndices: set of nat1 = { i | 
					i in set inds rules & 
						rules(i).isValid(date) and
						user in set groupUsers(rules(i).getGroupUser()) and 
						accessPoint.getFacility() in set groupFacilities(rules(i).getGroupFacility()) 
				} in 
		(
			if card validIndices = 0 or rules(Utils`max(validIndices)).getRuleType() = <deny>
			then return mk_(false, user.name, "user is not authorized")
			else return mk_(true, user.name, "")
		)
	);
	
	/*
	 * Request access.
	 *
	 * @param ac - the accesscard that requests access
	 * @param accessPoint - the accesspoint from which the request is sent
	 * @param date - the date of the request
	 *
	 * @return true if the access was granted or false otherwise 
	 */
	public requestAccess : AccessCard * AccessPoint * DateTime ==> bool
	requestAccess(ac, accessPoint, date) == (
		let result = requestAccessImpl(ac, accessPoint, date) in (
			if result.#1
			then log(date.toString() ^ ": Access granted to " ^ accessPoint.getFacility().name ^ " for " ^ result.#2 ^ ".")
			else log(date.toString() ^ ": Access denied to " ^ accessPoint.getFacility().name ^ " for " ^ result.#2 ^ ": " ^ result.#3 ^ ".");
			
			return result.#1;
		);
	);
		
end PhysicalAccessControlSystem
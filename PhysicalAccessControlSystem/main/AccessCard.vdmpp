class AccessCard

-------------------------------------
--            AccessCard           --
-------------------------------------
--           Description           --
-- - - - - - - - - - - - - - - - - --
--   Class that defines an access  --
-- card.                           --
-------------------------------------

instance variables

	/* Unique AccessCard ID */
	id: nat;
	
	/* AccessCard expiration date of type DateTime */
	expirationDate: [DateTime];
	
operations

	/*
	 * AccessCard constructor with expirationDate.
	 *
	 * @param uniqueID - the card unique identification
	 * @param date - the card expiration date
	 *
	 * @return AccessCard with the id and expirationDate set to the param values
	 */
	public AccessCard : nat * DateTime ==> AccessCard
	AccessCard(uniqueID, date) == 
	(
		id := uniqueID;
		expirationDate := date;
		return self;
	);
	
	/*
	 * AccessCard constructor.
	 *
	 * @param uniqueID - the card unique identification
	 *
	 * @return AccessCard with the id set to the param value and with no expirationDate
	 */
	public AccessCard : nat ==> AccessCard
	AccessCard(uniqueID) ==
	(
		id := uniqueID;
		expirationDate := nil;
		return self;
	);
	
	/*
	 * Checks if the AccessCard is still valid by comparing the cards expirationDate to the given date.
	 *
	 * @param date - the date to validate the card of type DateTime
	 *
	 * @return true if the accesscard is still valid for that date or false otherwise
	 */
	public isValid : DateTime ==> bool
	isValid(date) ==
	(
		return not hasExpirationDate() or expirationDate.isGreaterOrEqual(date);
	);
	
	/*
	 * Getter for the AccessCard ID.
	 *
	 * @return the accessCard unique id
	 */
	public getID : () ==> nat
	getID() == (
		return self.id;
	);
	
	/*
	 * Checks if AccessCard has an expirationDate.
	 *
	 * @return true if the accesscard has an expirationDate set or false otherwise
	 */
	public hasExpirationDate : () ==> bool
	hasExpirationDate() == 
		return self.expirationDate <> nil;
	
	/*
	 * Getter for the AccessCard expirationDate.
	 *
	 * @return the accessCard expirationDate if it exists
	 */
	public getExpirationDate : () ==> DateTime
	getExpirationDate() == 
		return self.expirationDate
	pre expirationDate <> nil;
	
	/*
	 * Setter for the AccessCard expirationDate.
	 *
	 * @param newDate - the date to replace the current AccessCard expirationDate
	 */
	public setExpirationDate : DateTime ==> ()
	setExpirationDate(newDate) == 
		expirationDate := newDate;
	
	/*
	 * Removes the expirationDate for the AccessCard.
	 */
	public removeExpirationDate : () ==> ()
	removeExpirationDate() == 
		expirationDate := nil
	pre expirationDate <> nil;
		
end AccessCard
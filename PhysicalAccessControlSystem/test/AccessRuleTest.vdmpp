class AccessRuleTest
	instance variables
		
	operations		
		public testTemporalConstraints: () ==> ()
		testTemporalConstraints() ==
			let ar: AccessRule = new AccessRule(
					"FEUP", 
					"User1", 
					<allow>, 
					AccessRule`makeBetweenTemporalConstraint(new DateTime(1,1,2000), new DateTime(1,1,2001))) in (
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001)));
				
				ar.removeTemporalConstraint();
				Assert`assertFalse(ar.hasTemporalConstraint());
				
				ar.setTemporalConstraint(AccessRule`makeAfterTemporalConstraint(new DateTime(1,1,2000)));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2001)));
				
				ar.setTemporalConstraint(AccessRule`makeBeforeTemporalConstraint(new DateTime(1,1,2000)));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2000)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 1999)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001)));
				
				
				
				ar.setTemporalConstraint(AccessRule`makeTimeBetweenTemporalConstraint(10, 0, 0, 11, 0, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2001, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999, 9, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001, 11, 30, 0)));
				
				ar.setTemporalConstraint(AccessRule`makeTimeAfterTemporalConstraint(10, 0, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2001, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2001, 11, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999, 9, 30, 0)));
				
				ar.setTemporalConstraint(AccessRule`makeTimeBeforeTemporalConstraint(10, 0, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 2, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 3, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 3, 2001, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 1999, 9, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001, 11, 30, 0)));
				
				
				
				ar.setTemporalConstraint(AccessRule`makeMinuteBetweenTemporalConstraint(10, 0, 30, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000, 10, 20, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 2, 2000, 10, 20, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2000, 10, 20, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2001, 10, 20, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999, 9, 5, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001, 11, 35, 0)));
				
				ar.setTemporalConstraint(AccessRule`makeMinuteAfterTemporalConstraint(10, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 2, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2000, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(2, 3, 2001, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 2001, 11, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 1999, 9, 5, 0)));
				
				ar.setTemporalConstraint(AccessRule`makeMinuteBeforeTemporalConstraint(10, 0));
				Assert`assertTrue(ar.hasTemporalConstraint());
				
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 2, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 3, 2000, 10, 30, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(2, 3, 2001, 10, 30, 0)));
				Assert`assertTrue(ar.isValid(new DateTime(1, 2, 1999, 9, 5, 0)));
				Assert`assertFalse(ar.isValid(new DateTime(1, 2, 2001, 11, 30, 0)));
			
				
			);
		
		public testGetters: () ==> ()
		testGetters() == 
			let ar : AccessRule = new AccessRule("FEUP", "User1", <allow>) in (
				Assert`assertFalse(ar.hasTemporalConstraint());
			
				Assert`assertEqual(ar.getGroupFacility(), "FEUP");
				Assert`assertEqual(ar.getGroupUser(), "User1");
				Assert`assertEqual(ar.getRuleType(), <allow>);
			);
	
		public static main: () ==> ()
    main() ==
    (
    	let art : AccessRuleTest = new AccessRuleTest() in (
    		art.testTemporalConstraints();
    		art.testGetters();
      );
    );

end AccessRuleTest

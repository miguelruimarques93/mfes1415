class PhysicalAccessControlSystemTest
instance variables

operations

		public static main: () ==> ()
		main() ==
		(
			let pacs: PhysicalAccessControlSystem = new PhysicalAccessControlSystem() in (
				IO`println(pacs);
				let user: PhysicalAccessControlSystem`User = pacs.createNewUser("Miguel"),
					  user1: PhysicalAccessControlSystem`User = pacs.createNewUser("Cleto") in ( 
					IO`println(pacs);
					IO`println(user);
					let feup: PhysicalAccessControlSystem`Facility = pacs.createNewFacility("FEUP") in (
						IO`println(pacs);
						IO`println(feup);	
						let ac: AccessCard = pacs.createNewAccessCard(),
								ac1: AccessCard = pacs.createNewTemporaryAccessCard(new Date(15, 12, 2014))
						 in (
							IO`println(pacs);
							IO`println(ac);	
							let ap: AccessPoint = pacs.createNewAccessPoint(feup) in (
								IO`println(pacs);
								IO`println(ap);	
			
								pacs.associateAccessCardToUser(ac, user);
								pacs.associateAccessCardToUser(ac1, user1);
								
								IO`println(pacs);
								pacs.addAccessRuleToAccessPoint(ap, new AccessRule("FEUP", "Miguel", <deny>));
								IO`println(pacs);
			
								Assert`assertFalse(pacs.requestAccess(ac, ap, new Date(16, 12, 2014)));
								
								pacs.addAccessRuleToAccessPoint(ap, new AccessRule("FEUP", "Miguel", <allow>));
								
								Assert`assertTrue(pacs.requestAccess(ac, ap, new Date(16, 12, 2014)));
								
								pacs.removeUserAccessCard(user);
								pacs.transferUserAccessCard(user1, user);
								
								Assert`assertFalse(pacs.requestAccess(ac1, ap, new Date(16, 12, 2014)));
								Assert`assertTrue(pacs.requestAccess(ac1, ap, new Date(14, 12, 2014)));
			)))));
		);

end PhysicalAccessControlSystemTest